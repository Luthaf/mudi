var searchIndex = {};
searchIndex['mudi'] = {"items":[[3,"ArrayBase","mudi","ArrayBase implements all the operations on arrays, using a `Storage` and\nsome `Dimensions`.",null,null],[11,"offset","core::ops","",0,{"inputs":[{"name":"range"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"size","","",0,{"inputs":[{"name":"range"}],"output":{"name":"usize"}}],[11,"offset","","",0,{"inputs":[{"name":"range"},{"name":"i32"}],"output":{"name":"usize"}}],[11,"size","","",0,{"inputs":[{"name":"range"}],"output":{"name":"usize"}}],[11,"from_vec","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"box"}}],[11,"as_ref","","",1,null],[11,"as_mut","","",1,null],[11,"fmt","mudi","",2,{"inputs":[{"name":"arraybase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_vector","","Create a new array using content from the vector.",2,{"inputs":[{"name":"arraybase"},{"name":"vec"},{"name":"d"}],"output":{"name":"arraybase"}}],[11,"shape","","Get the shape of the array.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"d"}}],[11,"flat_iter","","Flat (linear) iteration over array elements.",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"iter"}}],[11,"flat_iter_mut","","Flat (linear) iteration over mutable array elements. See the\ndocumentation for [`Array::flat_iter`](#method.flat_iter).",2,{"inputs":[{"name":"arraybase"}],"output":{"name":"itermut"}}],[11,"from_element","","Create a new array by cloning a specific element as needed.",2,{"inputs":[{"name":"arraybase"},{"name":"item"},{"name":"d"}],"output":{"name":"arraybase"}}],[11,"index","","",2,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"item"}}],[11,"index_mut","","",2,{"inputs":[{"name":"arraybase"},{"name":"i"}],"output":{"name":"item"}}],[11,"eq","","",2,{"inputs":[{"name":"arraybase"},{"name":"arraybase"}],"output":{"name":"bool"}}],[6,"Array","","An array with owned storage.",null,null],[8,"Dimensions","","A (set of) dimensions in an array. `Dimensions` objects carry informations\nabout there size, and how to convert a multi-dimensional index to a linear\noffset.",null,null],[16,"Index","","The type to use to index this dimension",3,null],[10,"offset","","Convert an index to a linear offset for this dimension size",3,{"inputs":[{"name":"dimensions"},{"name":"index"}],"output":{"name":"usize"}}],[10,"size","","Get the number of elements in this dimension",3,{"inputs":[{"name":"dimensions"}],"output":{"name":"usize"}}],[8,"Storage","","Storage of data from an array",null,null],[16,"Item","","Type of items in this array",4,null],[10,"from_vec","","Create the storage from a vector",4,{"inputs":[{"name":"storage"},{"name":"vec"}],"output":{"name":"self"}}],[10,"as_ref","","Convert the storage to a slice",4,null],[10,"as_mut","","Convert the storage to a mutable slice",4,null],[14,"array!","","Creates an Array containing the arguments, like the `vec!` macro.",null,null]],"paths":[[3,"Range"],[3,"Box"],[3,"ArrayBase"],[8,"Dimensions"],[8,"Storage"]]};
initSearch(searchIndex);
